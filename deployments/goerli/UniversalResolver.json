{
  "address": "0x96f654cD158e07543c01fCc14cB19bc5cC56A876",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverWildcardNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "_resolveSingle",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchGatewayURLs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "findResolver",
      "outputs": [
        {
          "internalType": "contract Resolver",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveSingleCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "gateways",
          "type": "string[]"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reverseName",
          "type": "bytes"
        }
      ],
      "name": "reverse",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "reverseCallback",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_urls",
          "type": "string[]"
        }
      ],
      "name": "setGatewayURLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03205ada753211651bbada9cbf69ee926e374ee2689996c8cb2b11380c93b0f8",
  "receipt": {
    "to": null,
    "from": "0xb983a9a7Ce068f546bFB6381cB17DF2171E92810",
    "contractAddress": "0x96f654cD158e07543c01fCc14cB19bc5cC56A876",
    "transactionIndex": 28,
    "gasUsed": "3022795",
    "logsBloom": "0x
    "blockHash": "0xf183d490c1a80eb4568a26e0e289d29e245d5232b1712503e97912b8e67a1066",
    "transactionHash": "0x03205ada753211651bbada9cbf69ee926e374ee2689996c8cb2b11380c93b0f8",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 9836409,
        "transactionHash": "0x03205ada753211651bbada9cbf69ee926e374ee2689996c8cb2b11380c93b0f8",
        "address": "0x96f654cD158e07543c01fCc14cB19bc5cC56A876",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b983a9a7ce068f546bfb6381cb17df2171e92810"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0xf183d490c1a80eb4568a26e0e289d29e245d5232b1712503e97912b8e67a1066"
      }
    ],
    "blockNumber": 9836409,
    "cumulativeGasUsed": "8434106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7242eD1170Da03E912e579AeAb430Dbd15Ef5dD7",
    [
      "http://example.com",
      "http://another-example.com"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "7ee732588be06434ba70e7cf398e25a8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverWildcardNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"_resolveSingle\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchGatewayURLs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"findResolver\",\"outputs\":[{\"internalType\":\"contract Resolver\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveSingleCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"gateways\",\"type\":\"string[]\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reverseName\",\"type\":\"bytes\"}],\"name\":\"reverse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"reverseCallback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_urls\",\"type\":\"string[]\"}],\"name\":\"setGatewayURLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"findResolver(bytes)\":{\"details\":\"Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.\",\"params\":{\"name\":\"The name to resolve, in DNS-encoded and normalised form.\"},\"returns\":{\"_0\":\"resolver The Resolver responsible for this name.\",\"_1\":\"namehash The namehash of the full name.\",\"_2\":\"finalOffset The offset of the first label with a resolver.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolve(bytes,bytes)\":{\"details\":\"Performs ENS name resolution for the supplied name and resolution data.\",\"params\":{\"data\":\"The resolution data, as specified in ENSIP-10.\",\"name\":\"The name to resolve, in normalised and DNS-encoded form.\"},\"returns\":{\"_0\":\"The result of resolving the name.\"}},\"reverse(bytes,string[])\":{\"details\":\"Performs ENS name reverse resolution for the supplied reverse name.\",\"params\":{\"reverseName\":\"The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\"},\"returns\":{\"_0\":\"The resolved name, the resolved address, the reverse resolver address, and the resolver address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an ENS name.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/UniversalResolver.sol\":\"UniversalResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/resolvers/Resolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./profiles/IABIResolver.sol\\\";\\nimport \\\"./profiles/IAddressResolver.sol\\\";\\nimport \\\"./profiles/IAddrResolver.sol\\\";\\nimport \\\"./profiles/IContentHashResolver.sol\\\";\\nimport \\\"./profiles/IDNSRecordResolver.sol\\\";\\nimport \\\"./profiles/IDNSZoneResolver.sol\\\";\\nimport \\\"./profiles/IInterfaceResolver.sol\\\";\\nimport \\\"./profiles/INameResolver.sol\\\";\\nimport \\\"./profiles/IPubkeyResolver.sol\\\";\\nimport \\\"./profiles/ITextResolver.sol\\\";\\nimport \\\"./profiles/IExtendedResolver.sol\\\";\\n\\n/**\\n * A generic resolver interface which includes all the functions including the ones deprecated\\n */\\ninterface Resolver is\\n    IERC165,\\n    IABIResolver,\\n    IAddressResolver,\\n    IAddrResolver,\\n    IContentHashResolver,\\n    IDNSRecordResolver,\\n    IDNSZoneResolver,\\n    IInterfaceResolver,\\n    INameResolver,\\n    IPubkeyResolver,\\n    ITextResolver,\\n    IExtendedResolver\\n{\\n    /* Deprecated events */\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n\\n    function setApprovalForAll(address, bool) external;\\n\\n    function approve(bytes32 node, address delegate, bool approved) external;\\n\\n    function isApprovedForAll(address account, address operator) external;\\n\\n    function isApprovedFor(\\n        address owner,\\n        bytes32 node,\\n        address delegate\\n    ) external;\\n\\n    function setABI(\\n        bytes32 node,\\n        uint256 contentType,\\n        bytes calldata data\\n    ) external;\\n\\n    function setAddr(bytes32 node, address addr) external;\\n\\n    function setAddr(bytes32 node, uint256 coinType, bytes calldata a) external;\\n\\n    function setContenthash(bytes32 node, bytes calldata hash) external;\\n\\n    function setDnsrr(bytes32 node, bytes calldata data) external;\\n\\n    function setName(bytes32 node, string calldata _name) external;\\n\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\\n\\n    function setText(\\n        bytes32 node,\\n        string calldata key,\\n        string calldata value\\n    ) external;\\n\\n    function setInterface(\\n        bytes32 node,\\n        bytes4 interfaceID,\\n        address implementer\\n    ) external;\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    /* Deprecated functions */\\n    function content(bytes32 node) external view returns (bytes32);\\n\\n    function multihash(bytes32 node) external view returns (bytes memory);\\n\\n    function setContent(bytes32 node, bytes32 hash) external;\\n\\n    function setMultihash(bytes32 node, bytes calldata hash) external;\\n}\\n\",\"keccak256\":\"0xfc77ab6b7c59c3ebfe1c720bdebf9b08c2488ff7ac9501a9aa056c5d6d5b50c5\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(\\n        bytes32 node,\\n        uint256 contentTypes\\n    ) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x85b373d02d19374fe570af407f459768285704bf7f30ab17c30eabfb5a10e4c3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(\\n        bytes32 indexed node,\\n        uint256 coinType,\\n        bytes newAddress\\n    );\\n\\n    function addr(\\n        bytes32 node,\\n        uint256 coinType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x411447c1e90c51e09702815a85ec725ffbbe37cf96e8cc4d2a8bd4ad8a59d73e\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(\\n        bytes32 indexed node,\\n        bytes name,\\n        uint16 resource,\\n        bytes record\\n    );\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(\\n        bytes32 node,\\n        bytes32 name,\\n        uint16 resource\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xcfa52200edd337f2c6c5bf402352600584da033b21323603e53de33051a3e25d\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(\\n        bytes32 indexed node,\\n        bytes lastzonehash,\\n        bytes zonehash\\n    );\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xca1b3a16e7005533f2800a3e66fcdccf7c574deac7913d8c810f40aec1d58dc0\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(\\n        bytes32 indexed node,\\n        bytes4 indexed interfaceID,\\n        address implementer\\n    );\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(\\n        bytes32 node,\\n        bytes4 interfaceID\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x390321fb58f7b927df9562450981e74b4be3907e7c09df321fd3b7409b63ae28\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(\\n        bytes32 indexed node,\\n        string indexed indexedKey,\\n        string key,\\n        string value\\n    );\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(\\n        bytes32 node,\\n        string calldata key\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7c5debb3c42cd9f5de2274ea7aa053f238608314b62db441c40e31cea2543fd5\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /**\\n     * @dev Attempts to parse bytes32 from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32 r, bool valid) {\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                r := or(shl(8, r), combined)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to parse an address from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n}\\n\",\"keccak256\":\"0xcae20ad72181f47dfe7fba7d88e8d902a01576b16e93362878e726989d6cfb4d\",\"license\":\"MIT\"},\"contracts/utils/LowLevelCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary LowLevelCallUtils {\\n    using Address for address;\\n\\n    /**\\n     * @dev Makes a static call to the specified `target` with `data`. Return data can be fetched with\\n     *      `returnDataSize` and `readReturnData`.\\n     * @param target The address to staticcall.\\n     * @param data The data to pass to the call.\\n     * @return success True if the call succeeded, or false if it reverts.\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bool success) {\\n        require(\\n            target.isContract(),\\n            \\\"LowLevelCallUtils: static call to non-contract\\\"\\n        );\\n        assembly {\\n            success := staticcall(\\n                gas(),\\n                target,\\n                add(data, 32),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the size of the return data of the most recent external call.\\n     */\\n    function returnDataSize() internal pure returns (uint256 len) {\\n        assembly {\\n            len := returndatasize()\\n        }\\n    }\\n\\n    /**\\n     * @dev Reads return data from the most recent external call.\\n     * @param offset Offset into the return data.\\n     * @param length Number of bytes to return.\\n     */\\n    function readReturnData(\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (bytes memory data) {\\n        data = new bytes(length);\\n        assembly {\\n            returndatacopy(add(data, 32), offset, length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with the return data from the most recent external call.\\n     */\\n    function propagateRevert() internal pure {\\n        assembly {\\n            returndatacopy(0, 0, returndatasize())\\n            revert(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x20d3d0d14fab6fc079f90d630a51bb8e274431ca929591ec8d62383ce946cb3a\",\"license\":\"MIT\"},\"contracts/utils/NameEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\n\\nlibrary NameEncoder {\\n    using BytesUtils for bytes;\\n\\n    function dnsEncodeName(\\n        string memory name\\n    ) internal pure returns (bytes memory dnsName, bytes32 node) {\\n        uint8 labelLength = 0;\\n        bytes memory bytesName = bytes(name);\\n        uint256 length = bytesName.length;\\n        dnsName = new bytes(length + 2);\\n        node = 0;\\n        if (length == 0) {\\n            dnsName[0] = 0;\\n            return (dnsName, node);\\n        }\\n\\n        // use unchecked to save gas since we check for an underflow\\n        // and we check for the length before the loop\\n        unchecked {\\n            for (uint256 i = length - 1; i >= 0; i--) {\\n                if (bytesName[i] == \\\".\\\") {\\n                    dnsName[i + 1] = bytes1(labelLength);\\n                    node = keccak256(\\n                        abi.encodePacked(\\n                            node,\\n                            bytesName.keccak(i + 1, labelLength)\\n                        )\\n                    );\\n                    labelLength = 0;\\n                } else {\\n                    labelLength += 1;\\n                    dnsName[i + 1] = bytesName[i];\\n                }\\n                if (i == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n\\n        node = keccak256(\\n            abi.encodePacked(node, bytesName.keccak(0, labelLength))\\n        );\\n\\n        dnsName[0] = bytes1(labelLength);\\n        return (dnsName, node);\\n    }\\n}\\n\",\"keccak256\":\"0x63fd5f360cef8c9b8b8cfdff20d3f0e955b4c8ac7dfac758788223c61678aad1\",\"license\":\"MIT\"},\"contracts/utils/UniversalResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {LowLevelCallUtils} from \\\"./LowLevelCallUtils.sol\\\";\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {IExtendedResolver} from \\\"../resolvers/profiles/IExtendedResolver.sol\\\";\\nimport {Resolver, INameResolver, IAddrResolver} from \\\"../resolvers/Resolver.sol\\\";\\nimport {NameEncoder} from \\\"./NameEncoder.sol\\\";\\nimport {BytesUtils} from \\\"../wrapper/BytesUtils.sol\\\";\\nimport {HexUtils} from \\\"./HexUtils.sol\\\";\\n\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\nerror ResolverNotFound();\\n\\nerror ResolverWildcardNotSupported();\\n\\nstruct MulticallData {\\n    bytes name;\\n    bytes[] data;\\n    string[] gateways;\\n    bytes4 callbackFunction;\\n    bool isWildcard;\\n    address resolver;\\n    bytes metaData;\\n    bool[] failures;\\n}\\n\\nstruct OffchainLookupCallData {\\n    address sender;\\n    string[] urls;\\n    bytes callData;\\n}\\n\\nstruct OffchainLookupExtraData {\\n    bytes4 callbackFunction;\\n    bytes data;\\n}\\n\\ninterface BatchGateway {\\n    function query(\\n        OffchainLookupCallData[] memory data\\n    ) external returns (bool[] memory failures, bytes[] memory responses);\\n}\\n\\n/**\\n * The Universal Resolver is a contract that handles the work of resolving a name entirely onchain,\\n * making it possible to make a single smart contract call to resolve an ENS name.\\n */\\ncontract UniversalResolver is ERC165, Ownable {\\n    using Address for address;\\n    using NameEncoder for string;\\n    using BytesUtils for bytes;\\n    using HexUtils for bytes;\\n\\n    string[] public batchGatewayURLs;\\n    ENS public immutable registry;\\n\\n    constructor(address _registry, string[] memory _urls) {\\n        registry = ENS(_registry);\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    function setGatewayURLs(string[] memory _urls) public onlyOwner {\\n        batchGatewayURLs = _urls;\\n    }\\n\\n    /**\\n     * @dev Performs ENS name resolution for the supplied name and resolution data.\\n     * @param name The name to resolve, in normalised and DNS-encoded form.\\n     * @param data The resolution data, as specified in ENSIP-10.\\n     * @return The result of resolving the name.\\n     */\\n    function resolve(\\n        bytes calldata name,\\n        bytes memory data\\n    ) external view returns (bytes memory, address) {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                batchGatewayURLs,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes[] memory data\\n    ) external view returns (bytes[] memory, address) {\\n        return resolve(name, data, batchGatewayURLs);\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways\\n    ) external view returns (bytes memory, address) {\\n        return\\n            _resolveSingle(\\n                name,\\n                data,\\n                gateways,\\n                this.resolveSingleCallback.selector,\\n                \\\"\\\"\\n            );\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways\\n    ) public view returns (bytes[] memory, address) {\\n        return\\n            _resolve(name, data, gateways, this.resolveCallback.selector, \\\"\\\");\\n    }\\n\\n    function _resolveSingle(\\n        bytes calldata name,\\n        bytes memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) public view returns (bytes memory, address) {\\n        bytes[] memory dataArr = new bytes[](1);\\n        dataArr[0] = data;\\n        (bytes[] memory results, address resolver) = _resolve(\\n            name,\\n            dataArr,\\n            gateways,\\n            callbackFunction,\\n            metaData\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function _resolve(\\n        bytes calldata name,\\n        bytes[] memory data,\\n        string[] memory gateways,\\n        bytes4 callbackFunction,\\n        bytes memory metaData\\n    ) internal view returns (bytes[] memory results, address resolverAddress) {\\n        (Resolver resolver, , uint256 finalOffset) = findResolver(name);\\n        resolverAddress = address(resolver);\\n        if (resolverAddress == address(0)) {\\n            revert ResolverNotFound();\\n        }\\n\\n        bool isWildcard = finalOffset != 0;\\n\\n        results = _multicall(\\n            MulticallData(\\n                name,\\n                data,\\n                gateways,\\n                callbackFunction,\\n                isWildcard,\\n                resolverAddress,\\n                metaData,\\n                new bool[](data.length)\\n            )\\n        );\\n    }\\n\\n    function reverse(\\n        bytes calldata reverseName\\n    ) external view returns (string memory, address, address, address) {\\n        return reverse(reverseName, batchGatewayURLs);\\n    }\\n\\n    /**\\n     * @dev Performs ENS name reverse resolution for the supplied reverse name.\\n     * @param reverseName The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse\\n     * @return The resolved name, the resolved address, the reverse resolver address, and the resolver address.\\n     */\\n    function reverse(\\n        bytes calldata reverseName,\\n        string[] memory gateways\\n    ) public view returns (string memory, address, address, address) {\\n        bytes memory encodedCall = abi.encodeCall(\\n            INameResolver.name,\\n            reverseName.namehash(0)\\n        );\\n        (\\n            bytes memory resolvedReverseData,\\n            address reverseResolverAddress\\n        ) = _resolveSingle(\\n                reverseName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                \\\"\\\"\\n            );\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedReverseData,\\n                reverseResolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function getForwardDataFromReverse(\\n        bytes memory resolvedReverseData,\\n        address reverseResolverAddress,\\n        string[] memory gateways\\n    ) internal view returns (string memory, address, address, address) {\\n        string memory resolvedName = abi.decode(resolvedReverseData, (string));\\n\\n        (bytes memory encodedName, bytes32 namehash) = resolvedName\\n            .dnsEncodeName();\\n\\n        bytes memory encodedCall = abi.encodeCall(IAddrResolver.addr, namehash);\\n        bytes memory metaData = abi.encode(\\n            resolvedName,\\n            reverseResolverAddress\\n        );\\n        (bytes memory resolvedData, address resolverAddress) = this\\n            ._resolveSingle(\\n                encodedName,\\n                encodedCall,\\n                gateways,\\n                this.reverseCallback.selector,\\n                metaData\\n            );\\n\\n        address resolvedAddress = abi.decode(resolvedData, (address));\\n\\n        return (\\n            resolvedName,\\n            resolvedAddress,\\n            reverseResolverAddress,\\n            resolverAddress\\n        );\\n    }\\n\\n    function resolveSingleCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes memory, address) {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveSingleCallback.selector\\n        );\\n        return (results[0], resolver);\\n    }\\n\\n    function resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes[] memory, address) {\\n        (bytes[] memory results, address resolver, , ) = _resolveCallback(\\n            response,\\n            extraData,\\n            this.resolveCallback.selector\\n        );\\n        return (results, resolver);\\n    }\\n\\n    function reverseCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (string memory, address, address, address) {\\n        (\\n            bytes[] memory resolvedData,\\n            address resolverAddress,\\n            string[] memory gateways,\\n            bytes memory metaData\\n        ) = _resolveCallback(\\n                response,\\n                extraData,\\n                this.reverseCallback.selector\\n            );\\n\\n        if (metaData.length > 0) {\\n            (string memory resolvedName, address reverseResolverAddress) = abi\\n                .decode(metaData, (string, address));\\n            address resolvedAddress = abi.decode(resolvedData[0], (address));\\n            return (\\n                resolvedName,\\n                resolvedAddress,\\n                reverseResolverAddress,\\n                resolverAddress\\n            );\\n        }\\n\\n        return\\n            getForwardDataFromReverse(\\n                resolvedData[0],\\n                resolverAddress,\\n                gateways\\n            );\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IExtendedResolver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData,\\n        bytes4 callbackFunction\\n    )\\n        internal\\n        view\\n        returns (bytes[] memory, address, string[] memory, bytes memory)\\n    {\\n        MulticallData memory multicallData;\\n        multicallData.callbackFunction = callbackFunction;\\n        (bool[] memory failures, bytes[] memory responses) = abi.decode(\\n            response,\\n            (bool[], bytes[])\\n        );\\n        OffchainLookupExtraData[] memory extraDatas;\\n        (\\n            multicallData.isWildcard,\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData,\\n            extraDatas\\n        ) = abi.decode(\\n            extraData,\\n            (bool, address, string[], bytes, OffchainLookupExtraData[])\\n        );\\n        require(responses.length <= extraDatas.length);\\n        multicallData.data = new bytes[](extraDatas.length);\\n        multicallData.failures = new bool[](extraDatas.length);\\n        uint256 offchainCount = 0;\\n        for (uint256 i = 0; i < extraDatas.length; i++) {\\n            if (extraDatas[i].callbackFunction == bytes4(0)) {\\n                // This call did not require an offchain lookup; use the previous input data.\\n                multicallData.data[i] = extraDatas[i].data;\\n            } else {\\n                if (failures[offchainCount]) {\\n                    multicallData.failures[i] = true;\\n                    multicallData.data[i] = responses[offchainCount];\\n                } else {\\n                    multicallData.data[i] = abi.encodeWithSelector(\\n                        extraDatas[i].callbackFunction,\\n                        responses[offchainCount],\\n                        extraDatas[i].data\\n                    );\\n                }\\n                offchainCount = offchainCount + 1;\\n            }\\n        }\\n\\n        return (\\n            _multicall(multicallData),\\n            multicallData.resolver,\\n            multicallData.gateways,\\n            multicallData.metaData\\n        );\\n    }\\n\\n    /**\\n     * @dev Makes a call to `target` with `data`. If the call reverts with an `OffchainLookup` error, wraps\\n     *      the error with the data necessary to continue the request where it left off.\\n     * @param target The address to call.\\n     * @param data The data to call `target` with.\\n     * @return offchain Whether the call reverted with an `OffchainLookup` error.\\n     * @return returnData If `target` did not revert, contains the return data from the call to `target`. Otherwise, contains a `OffchainLookupCallData` struct.\\n     * @return extraData If `target` did not revert, is empty. Otherwise, contains a `OffchainLookupExtraData` struct.\\n     * @return result Whether the call succeeded.\\n     */\\n    function callWithOffchainLookupPropagation(\\n        address target,\\n        bytes memory data\\n    )\\n        internal\\n        view\\n        returns (\\n            bool offchain,\\n            bytes memory returnData,\\n            OffchainLookupExtraData memory extraData,\\n            bool result\\n        )\\n    {\\n        result = LowLevelCallUtils.functionStaticCall(address(target), data);\\n        uint256 size = LowLevelCallUtils.returnDataSize();\\n\\n        if (result) {\\n            return (\\n                false,\\n                LowLevelCallUtils.readReturnData(0, size),\\n                extraData,\\n                true\\n            );\\n        }\\n\\n        // Failure\\n        if (size >= 4) {\\n            bytes memory errorId = LowLevelCallUtils.readReturnData(0, 4);\\n            // Offchain lookup. Decode the revert message and create our own that nests it.\\n            bytes memory revertData = LowLevelCallUtils.readReturnData(\\n                4,\\n                size - 4\\n            );\\n            if (bytes4(errorId) == OffchainLookup.selector) {\\n                (\\n                    address wrappedSender,\\n                    string[] memory wrappedUrls,\\n                    bytes memory wrappedCallData,\\n                    bytes4 wrappedCallbackFunction,\\n                    bytes memory wrappedExtraData\\n                ) = abi.decode(\\n                        revertData,\\n                        (address, string[], bytes, bytes4, bytes)\\n                    );\\n                if (wrappedSender == target) {\\n                    returnData = abi.encode(\\n                        OffchainLookupCallData(\\n                            wrappedSender,\\n                            wrappedUrls,\\n                            wrappedCallData\\n                        )\\n                    );\\n                    extraData = OffchainLookupExtraData(\\n                        wrappedCallbackFunction,\\n                        wrappedExtraData\\n                    );\\n                    return (true, returnData, extraData, false);\\n                }\\n            } else {\\n                returnData = bytes.concat(errorId, revertData);\\n                return (false, returnData, extraData, false);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Finds a resolver by recursively querying the registry, starting at the longest name and progressively\\n     *      removing labels until it finds a result.\\n     * @param name The name to resolve, in DNS-encoded and normalised form.\\n     * @return resolver The Resolver responsible for this name.\\n     * @return namehash The namehash of the full name.\\n     * @return finalOffset The offset of the first label with a resolver.\\n     */\\n    function findResolver(\\n        bytes calldata name\\n    ) public view returns (Resolver, bytes32, uint256) {\\n        (\\n            address resolver,\\n            bytes32 namehash,\\n            uint256 finalOffset\\n        ) = findResolver(name, 0);\\n        return (Resolver(resolver), namehash, finalOffset);\\n    }\\n\\n    function findResolver(\\n        bytes calldata name,\\n        uint256 offset\\n    ) internal view returns (address, bytes32, uint256) {\\n        uint256 labelLength = uint256(uint8(name[offset]));\\n        if (labelLength == 0) {\\n            return (address(0), bytes32(0), offset);\\n        }\\n        uint256 nextLabel = offset + labelLength + 1;\\n        bytes32 labelHash;\\n        if (\\n            labelLength == 66 &&\\n            // 0x5b == '['\\n            name[offset + 1] == 0x5b &&\\n            // 0x5d == ']'\\n            name[nextLabel - 1] == 0x5d\\n        ) {\\n            // Encrypted label\\n            (labelHash, ) = bytes(name[offset + 2:nextLabel - 1])\\n                .hexStringToBytes32(0, 64);\\n        } else {\\n            labelHash = keccak256(name[offset + 1:nextLabel]);\\n        }\\n        (\\n            address parentresolver,\\n            bytes32 parentnode,\\n            uint256 parentoffset\\n        ) = findResolver(name, nextLabel);\\n        bytes32 node = keccak256(abi.encodePacked(parentnode, labelHash));\\n        address resolver = registry.resolver(node);\\n        if (resolver != address(0)) {\\n            return (resolver, node, offset);\\n        }\\n        return (parentresolver, node, parentoffset);\\n    }\\n\\n    function _hasExtendedResolver(\\n        address resolver\\n    ) internal view returns (bool) {\\n        try\\n            Resolver(resolver).supportsInterface{gas: 50000}(\\n                type(IExtendedResolver).interfaceId\\n            )\\n        returns (bool supported) {\\n            return supported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _multicall(\\n        MulticallData memory multicallData\\n    ) internal view returns (bytes[] memory results) {\\n        uint256 length = multicallData.data.length;\\n        uint256 offchainCount = 0;\\n        OffchainLookupCallData[]\\n            memory callDatas = new OffchainLookupCallData[](length);\\n        OffchainLookupExtraData[]\\n            memory extraDatas = new OffchainLookupExtraData[](length);\\n        results = new bytes[](length);\\n        bool isCallback = multicallData.name.length == 0;\\n        bool hasExtendedResolver = _hasExtendedResolver(multicallData.resolver);\\n\\n        if (multicallData.isWildcard && !hasExtendedResolver) {\\n            revert ResolverWildcardNotSupported();\\n        }\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            bytes memory item = multicallData.data[i];\\n            bool failure = multicallData.failures[i];\\n            if (failure) {\\n                results[i] = item;\\n                continue;\\n            }\\n            if (!isCallback && hasExtendedResolver) {\\n                item = abi.encodeCall(\\n                    IExtendedResolver.resolve,\\n                    (multicallData.name, item)\\n                );\\n            }\\n            (\\n                bool offchain,\\n                bytes memory returnData,\\n                OffchainLookupExtraData memory extraData,\\n                bool success\\n            ) = callWithOffchainLookupPropagation(multicallData.resolver, item);\\n\\n            if (offchain) {\\n                callDatas[offchainCount] = abi.decode(\\n                    returnData,\\n                    (OffchainLookupCallData)\\n                );\\n                extraDatas[i] = extraData;\\n                offchainCount += 1;\\n                continue;\\n            }\\n\\n            if (success && hasExtendedResolver) {\\n                // if this is a successful resolve() call, unwrap the result\\n                returnData = abi.decode(returnData, (bytes));\\n            }\\n            results[i] = returnData;\\n            extraDatas[i].data = multicallData.data[i];\\n        }\\n\\n        if (offchainCount == 0) {\\n            return results;\\n        }\\n\\n        // Trim callDatas if offchain data exists\\n        assembly {\\n            mstore(callDatas, offchainCount)\\n        }\\n\\n        revert OffchainLookup(\\n            address(this),\\n            multicallData.gateways,\\n            abi.encodeWithSelector(BatchGateway.query.selector, callDatas),\\n            multicallData.callbackFunction,\\n            abi.encode(\\n                multicallData.isWildcard,\\n                multicallData.resolver,\\n                multicallData.gateways,\\n                multicallData.metaData,\\n                extraDatas\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb91e19ba33c86f8e65706383463a529dcc2997665782ac462a1fd9d03982b5c5\",\"license\":\"MIT\"},\"contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003880380380620038808339810160408190526200003491620001da565b6200003f336200006a565b6001600160a01b038216608052805162000061906001906020840190620000ba565b5050506200049c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000105579160200282015b82811115620001055782518290620000f49082620003d0565b5091602001919060010190620000db565b506200011392915062000117565b5090565b80821115620001135760006200012e828262000138565b5060010162000117565b508054620001469062000341565b6000825580601f1062000157575050565b601f0160209004906000526020600020908101906200017791906200017a565b50565b5b808211156200011357600081556001016200017b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d257620001d262000191565b604052919050565b6000806040808486031215620001ef57600080fd5b83516001600160a01b03811681146200020757600080fd5b602085810151919450906001600160401b03808211156200022757600080fd5b8187019150601f88818401126200023d57600080fd5b82518281111562000252576200025262000191565b8060051b62000263868201620001a7565b918252848101860191868101908c8411156200027e57600080fd5b87870192505b838310156200032e578251868111156200029e5760008081fd5b8701603f81018e13620002b15760008081fd5b8881015187811115620002c857620002c862000191565b620002db818801601f19168b01620001a7565b8181528f8c838501011115620002f15760008081fd5b60005b8281101562000311578381018d01518282018d01528b01620002f4565b5060009181018b0191909152835250918701919087019062000284565b8099505050505050505050509250929050565b600181811c908216806200035657607f821691505b6020821081036200037757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003cb57600081815260208120601f850160051c81016020861015620003a65750805b601f850160051c820191505b81811015620003c757828155600101620003b2565b5050505b505050565b81516001600160401b03811115620003ec57620003ec62000191565b6200040481620003fd845462000341565b846200037d565b602080601f8311600181146200043c5760008415620004235750858301515b600019600386901b1c1916600185901b178555620003c7565b600085815260208120601f198616915b828110156200046d578886015182559484019460019091019084016200044c565b50858210156200048c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516133c1620004bf600039600081816101ea015261141901526133c16000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638e5ea8df116100b2578063b241d0d311610081578063e0a8541211610066578063e0a85412146102ec578063ec11c823146102ff578063f2fde38b1461031257600080fd5b8063b241d0d3146102c6578063b4a85801146102d957600080fd5b80638e5ea8df146102485780639061b9231461025b578063a1cbcbaf1461026e578063a6b16419146102a657600080fd5b8063715018a6116101095780637b103999116100ee5780637b103999146101e55780638da5cb5b146102245780638e25a0f31461023557600080fd5b8063715018a6146101c857806376286c00146101d257600080fd5b806301ffc9a71461013b5780630667cfea14610163578063206c74c9146101845780636dc4fb73146101a5575b600080fd5b61014e610149366004612170565b610325565b60405190151581526020015b60405180910390f35b610176610171366004612397565b61035c565b60405161015a929190612475565b610197610192366004612520565b610391565b60405161015a929190612589565b6101b86101b33660046125fe565b61047e565b60405161015a949392919061266a565b6101d061054b565b005b6101976101e03660046126a6565b61055f565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015a565b6000546001600160a01b031661020c565b610176610243366004612705565b610587565b6101d06102563660046127cb565b61061c565b610176610269366004612808565b61063b565b61028161027c366004612867565b610734565b604080516001600160a01b03909416845260208401929092529082015260600161015a565b6102b96102b43660046128a9565b61075a565b60405161015a91906128c2565b6101b86102d43660046128d5565b610806565b6101976102e73660046125fe565b6108f7565b6101766102fa3660046125fe565b61093b565b6101b861030d366004612867565b61099f565b6101d0610320366004612949565b610a94565b60006001600160e01b03198216639061b92360e01b148061035657506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060006103848686868663e0a8541260e01b60405180602001604052806000815250610587565b9150915094509492505050565b606060006104728585856001805480602002602001604051908101604052809291908181526020016000905b828210156104695783829060005260206000200180546103dc90612966565b80601f016020809104026020016040519081016040528092919081815260200182805461040890612966565b80156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b5050505050815260200190600101906103bd565b5050505061055f565b91509150935093915050565b6060600080808080808061049c8c8c8c8c636dc4fb7360e01b610b29565b935093509350935060008151111561050e57600080828060200190518101906104c591906129e5565b915091506000866000815181106104de576104de612a37565b60200260200101518060200190518101906104f99190612a4d565b929a5091985096509294506105409350505050565b6105338460008151811061052457610524612a37565b60200260200101518484610eaf565b9750975097509750505050505b945094509450949050565b610553611010565b61055d600061106a565b565b606060006103848686868663b4a8580160e01b604051806020016040528060008152506110d2565b6040805160018082528183019092526060916000918291816020015b60608152602001906001900390816105a357905050905086816000815181106105ce576105ce612a37565b60200260200101819052506000806105ea8b8b858b8b8b6110d2565b915091508160008151811061060157610601612a37565b60200260200101518194509450505050965096945050505050565b610624611010565b805161063790600190602084019061209d565b5050565b606060006104728585856001805480602002602001604051908101604052809291908181526020016000905b8282101561071357838290600052602060002001805461068690612966565b80601f01602080910402602001604051908101604052809291908181526020018280546106b290612966565b80156106ff5780601f106106d4576101008083540402835291602001916106ff565b820191906000526020600020905b8154815290600101906020018083116106e257829003601f168201915b505050505081526020019060010190610667565b5050505063e0a8541260e01b60405180602001604052806000815250610587565b60008060008060008061074988886000611212565b919750955093505050509250925092565b6001818154811061076a57600080fd5b90600052602060002001600091509050805461078590612966565b80601f01602080910402602001604051908101604052809291908181526020018280546107b190612966565b80156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b505050505081565b6060600080600080610852600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114c09050565b60405160240161086491815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f691f3431000000000000000000000000000000000000000000000000000000001790528151908101909152600080825291925081906108d4908b908b9086908c90636dc4fb7360e01b90610587565b915091506108e382828a610eaf565b965096509650965050505093509350935093565b60606000808061092a888888887fb4a8580100000000000000000000000000000000000000000000000000000000610b29565b50919a909950975050505050505050565b60606000808061096e888888887fe0a8541200000000000000000000000000000000000000000000000000000000610b29565b5050915091508160008151811061098757610987612a37565b60200260200101518193509350505094509492505050565b60606000806000610a8286866001805480602002602001604051908101604052809291908181526020016000905b82821015610a795783829060005260206000200180546109ec90612966565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1890612966565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b5050505050815260200190600101906109cd565b50505050610806565b93509350935093505b92959194509250565b610a9c611010565b6001600160a01b038116610b1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b268161106a565b50565b60606000606080610b8d60405180610100016040528060608152602001606081526020016060815260200160006001600160e01b031916815260200160001515815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160e01b031986166060820152600080610bac8b8d018d612a78565b90925090506060610bbf8a8c018c612b30565b60c089019190915260408801919091526001600160a01b0390911660a08701529015156080860152805183519192501015610bf957600080fd5b805167ffffffffffffffff811115610c1357610c136121dd565b604051908082528060200260200182016040528015610c4657816020015b6060815260200190600190039081610c315790505b506020850152805167ffffffffffffffff811115610c6657610c666121dd565b604051908082528060200260200182016040528015610c8f578160200160208202803683370190505b5060e08501526000805b8251811015610e7d578251600090849083908110610cb957610cb9612a37565b6020026020010151600001516001600160e01b03191603610d1857828181518110610ce657610ce6612a37565b60200260200101516020015186602001518281518110610d0857610d08612a37565b6020026020010181905250610e6b565b848281518110610d2a57610d2a612a37565b602002602001015115610da15760018660e001518281518110610d4f57610d4f612a37565b602002602001019015159081151581525050838281518110610d7357610d73612a37565b602002602001015186602001518281518110610d9157610d91612a37565b6020026020010181905250610e5d565b828181518110610db357610db3612a37565b602002602001015160000151848381518110610dd157610dd1612a37565b6020026020010151848381518110610deb57610deb612a37565b602002602001015160200151604051602401610e08929190612cb4565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505086602001518281518110610e5157610e51612a37565b60200260200101819052505b610e68826001612cf8565b91505b80610e7581612d0b565b915050610c99565b50610e878561157f565b8560a0015186604001518760c001519850985098509850505050505095509550955095915050565b606060008060008087806020019051810190610ecb9190612d24565b9050600080610ed9836119c9565b91509150600081604051602401610ef291815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790529051919250600091610f4c9187918e9101612475565b6040516020818303038152906040529050600080306001600160a01b0316638e25a0f387868f636dc4fb7360e01b886040518663ffffffff1660e01b8152600401610f9b959493929190612db1565b600060405180830381865afa158015610fb8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe091908101906129e5565b91509150600082806020019051810190610ffa9190612a4d565b979f979e50909b50959950505050505050505050565b6000546001600160a01b0316331461055d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b14565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008060006110e38a8a610734565b919450849350909150506001600160a01b03821661112d576040517f7199966d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101206020601f8d01819004028201810190925261010081018b815283151592611202929182918f908f9081908501838280828437600092019190915250505090825250602081018c9052604081018b90526001600160e01b03198a16606082015283151560808201526001600160a01b03871660a082015260c081018990528b5160e09091019067ffffffffffffffff8111156111d1576111d16121dd565b6040519080825280602002602001820160405280156111fa578160200160208202803683370190505b50905261157f565b9450505050965096945050505050565b60008060008086868681811061122a5761122a612a37565b919091013560f81c915050600081900361124e5750600092508291508390506114b7565b600061125a8287612cf8565b611265906001612cf8565b905060008260421480156112ab57508888611281896001612cf8565b81811061129057611290612a37565b9050013560f81c60f81b6001600160f81b031916605b60f81b145b80156112e9575088886112bf600185612e1a565b8181106112ce576112ce612a37565b9050013560f81c60f81b6001600160f81b031916605d60f81b145b1561136157611359600060408b8b6113028c6002612cf8565b9061130e600189612e1a565b9261131b93929190612e2d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929493925050611bf29050565b509050611393565b888861136e896001612cf8565b61137a92859290612e2d565b604051611388929190612e57565b604051809103902090505b60008060006113a38c8c87611212565b925092509250600082856040516020016113c7929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612a4d565b90506001600160a01b038116156114a857995097508996506114b795505050505050565b50929850919650909450505050505b93509350939050565b60008060006114cf8585611cc3565b90925090508161154157600185516114e79190612e1a565b84146115355760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610b14565b50600091506103569050565b61154b85826114c0565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6020810151516060906000808267ffffffffffffffff8111156115a4576115a46121dd565b60405190808252806020026020018201604052801561160257816020015b6115ef604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816115c25790505b50905060008367ffffffffffffffff811115611620576116206121dd565b60405190808252806020026020018201604052801561166657816020015b60408051808201909152600081526060602082015281526020019060019003908161163e5790505b5090508367ffffffffffffffff811115611682576116826121dd565b6040519080825280602002602001820160405280156116b557816020015b60608152602001906001900390816116a05790505b5086515160a088015191965015906000906116cf90611d7a565b9050876080015180156116e0575080155b15611717576040517f82c2c72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868110156119075760008960200151828151811061173a5761173a612a37565b6020026020010151905060008a60e00151838151811061175c5761175c612a37565b60200260200101519050801561179157818a848151811061177f5761177f612a37565b602002602001018190525050506118f5565b8415801561179c5750835b156117e2578a516040516117b591908490602401612cb4565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b17905291505b6000806000806117f68f60a0015187611df5565b9350935093509350831561186b57828060200190518101906118189190612ee7565b8b8d8151811061182a5761182a612a37565b6020026020010181905250818a888151811061184857611848612a37565b602090810291909101015261185e60018d612cf8565b9b505050505050506118f5565b8080156118755750875b15611891578280602001905181019061188e9190612d24565b92505b828e88815181106118a4576118a4612a37565b60200260200101819052508e6020015187815181106118c5576118c5612a37565b60200260200101518a88815181106118df576118df612a37565b6020026020010151602001819052505050505050505b806118ff81612d0b565b91505061171a565b508460000361191b57505050505050919050565b84845230886040015163a780bab660e01b8660405160240161193d9190612fe2565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508a606001518b608001518c60a001518d604001518e60c001518a60405160200161199e959493929190613044565b60408051601f1981840301815290829052630556f18360e41b8252610b149594939291600401613101565b8051606090600090819084906119e0816002612cf8565b67ffffffffffffffff8111156119f8576119f86121dd565b6040519080825280601f01601f191660200182016040528015611a22576020820181803683370190505b50945060009350808403611a6757600060f81b85600081518110611a4857611a48612a37565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b828181518110611a7f57611a7f612a37565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003611b41578360f81b868260010181518110611ae557611ae5612a37565b60200101906001600160f81b031916908160001a90535084611b0e846001840160ff8816611f92565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611b91565b600184019350828181518110611b5957611b59612a37565b602001015160f81c60f81b868260010181518110611b7957611b79612a37565b60200101906001600160f81b031916908160001a9053505b8015611ba05760001901611a6d565b5083611bb183600060ff8716611f92565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110611a4857611a48612a37565b8251600090600190831115611c0657600080fd5b611c57565b6000603a8210602f83111615611c235750602f190190565b60478210604083111615611c3957506036190190565b60678210606083111615611c4f57506056190190565b5060ff919050565b60208501845b84811015611cb957611c748183015160001a611c0b565b611c866001830184015160001a611c0b565b60ff811460ff83141715611c9f57600094505050611cb9565b60049190911b1760089490941b9390931792600201611c5d565b5050935093915050565b60008083518310611d165760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610b14565b6000848481518110611d2a57611d2a612a37565b016020015160f81c90508015611d5657611d4f85611d49866001612cf8565b83611f92565b9250611d5b565b600092505b611d658185612cf8565b611d70906001612cf8565b9150509250929050565b6040516301ffc9a760e01b8152639061b92360e01b60048201526000906001600160a01b038316906301ffc9a79061c350906024016020604051808303818786fa93505050508015611de9575060408051601f3d908101601f19168201909252611de691810190613135565b60015b61035657506000919050565b60408051808201909152600080825260606020830181905290916000611e1b8686611fb6565b90503d8115611e41576000611e31600083612048565b909550935060019150610a8b9050565b60048110611f88576000611e5760006004612048565b90506000611e6f6004611e6a8186612e1a565b612048565b9050630556f18360e41b611e8283613152565b6001600160e01b03191603611f5057600080600080600085806020019051810190611ead919061318a565b945094509450945094508d6001600160a01b0316856001600160a01b031603611f46576040518060600160405280866001600160a01b0316815260200185815260200184815250604051602001611f04919061323a565b60408051601f198184030181528282019091526001600160e01b03199093168152602081019190915260019b50909950975060009650610a8b95505050505050565b5050505050611f85565b8181604051602001611f6392919061324d565b60408051601f19818403018152919052600097509550869350610a8b92505050565b50505b5092959194509250565b8251600090611fa18385612cf8565b1115611fac57600080fd5b5091016020012090565b60006001600160a01b0383163b6120355760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610b14565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115612063576120636121dd565b6040519080825280601f01601f19166020018201604052801561208d576020820181803683370190505b5090508183602083013e92915050565b8280548282559060005260206000209081019282156120e3579160200282015b828111156120e357825182906120d390826132cb565b50916020019190600101906120bd565b506120ef9291506120f3565b5090565b808211156120ef5760006121078282612110565b506001016120f3565b50805461211c90612966565b6000825580601f1061212c575050565b601f016020900490600052602060002090810190610b2691905b808211156120ef5760008155600101612146565b6001600160e01b031981168114610b2657600080fd5b60006020828403121561218257600080fd5b813561218d8161215a565b9392505050565b60008083601f8401126121a657600080fd5b50813567ffffffffffffffff8111156121be57600080fd5b6020830191508360208285010111156121d657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612216576122166121dd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612245576122456121dd565b604052919050565b600067ffffffffffffffff821115612267576122676121dd565b50601f01601f191660200190565b60006122886122838461224d565b61221c565b905082815283838301111561229c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126122c457600080fd5b61218d83833560208501612275565b600067ffffffffffffffff8211156122ed576122ed6121dd565b5060051b60200190565b600082601f83011261230857600080fd5b81356020612318612283836122d3565b82815260059290921b8401810191818101908684111561233757600080fd5b8286015b8481101561238c57803567ffffffffffffffff81111561235b5760008081fd5b8701603f8101891361236d5760008081fd5b61237e898683013560408401612275565b84525091830191830161233b565b509695505050505050565b600080600080606085870312156123ad57600080fd5b843567ffffffffffffffff808211156123c557600080fd5b6123d188838901612194565b909650945060208701359150808211156123ea57600080fd5b6123f6888389016122b3565b9350604087013591508082111561240c57600080fd5b50612419878288016122f7565b91505092959194509250565b60005b83811015612440578181015183820152602001612428565b50506000910152565b60008151808452612461816020860160208601612425565b601f01601f19169290920160200192915050565b6040815260006124886040830185612449565b90506001600160a01b03831660208301529392505050565b600082601f8301126124b157600080fd5b813560206124c1612283836122d3565b82815260059290921b840181019181810190868411156124e057600080fd5b8286015b8481101561238c57803567ffffffffffffffff8111156125045760008081fd5b6125128986838b01016122b3565b8452509183019183016124e4565b60008060006040848603121561253557600080fd5b833567ffffffffffffffff8082111561254d57600080fd5b61255987838801612194565b9095509350602086013591508082111561257257600080fd5b5061257f868287016124a0565b9150509250925092565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156125e057605f198887030185526125ce868351612449565b955093820193908201906001016125b2565b50508394506001600160a01b03871681870152505050509392505050565b6000806000806040858703121561261457600080fd5b843567ffffffffffffffff8082111561262c57600080fd5b61263888838901612194565b9096509450602087013591508082111561265157600080fd5b5061265e87828801612194565b95989497509550505050565b60808152600061267d6080830187612449565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b600080600080606085870312156126bc57600080fd5b843567ffffffffffffffff808211156126d457600080fd5b6126e088838901612194565b909650945060208701359150808211156126f957600080fd5b6123f6888389016124a0565b60008060008060008060a0878903121561271e57600080fd5b863567ffffffffffffffff8082111561273657600080fd5b6127428a838b01612194565b9098509650602089013591508082111561275b57600080fd5b6127678a838b016122b3565b9550604089013591508082111561277d57600080fd5b6127898a838b016122f7565b94506060890135915061279b8261215a565b909250608088013590808211156127b157600080fd5b506127be89828a016122b3565b9150509295509295509295565b6000602082840312156127dd57600080fd5b813567ffffffffffffffff8111156127f457600080fd5b612800848285016122f7565b949350505050565b60008060006040848603121561281d57600080fd5b833567ffffffffffffffff8082111561283557600080fd5b61284187838801612194565b9095509350602086013591508082111561285a57600080fd5b5061257f868287016122b3565b6000806020838503121561287a57600080fd5b823567ffffffffffffffff81111561289157600080fd5b61289d85828601612194565b90969095509350505050565b6000602082840312156128bb57600080fd5b5035919050565b60208152600061218d6020830184612449565b6000806000604084860312156128ea57600080fd5b833567ffffffffffffffff8082111561290257600080fd5b61290e87838801612194565b9095509350602086013591508082111561292757600080fd5b5061257f868287016122f7565b6001600160a01b0381168114610b2657600080fd5b60006020828403121561295b57600080fd5b813561218d81612934565b600181811c9082168061297a57607f821691505b60208210810361299a57634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f8301126129b157600080fd5b81516129bf6122838261224d565b8181528460208386010111156129d457600080fd5b612800826020830160208701612425565b600080604083850312156129f857600080fd5b825167ffffffffffffffff811115612a0f57600080fd5b612a1b858286016129a0565b9250506020830151612a2c81612934565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a5f57600080fd5b815161218d81612934565b8015158114610b2657600080fd5b60008060408385031215612a8b57600080fd5b823567ffffffffffffffff80821115612aa357600080fd5b818501915085601f830112612ab757600080fd5b81356020612ac7612283836122d3565b82815260059290921b84018101918181019089841115612ae657600080fd5b948201945b83861015612b0d578535612afe81612a6a565b82529482019490820190612aeb565b96505086013592505080821115612b2357600080fd5b50611d70858286016124a0565b600080600080600060a08688031215612b4857600080fd5b612b528635612a6a565b85359450612b636020870135612934565b6020860135935067ffffffffffffffff8060408801351115612b8457600080fd5b612b9488604089013589016122f7565b93508060608801351115612ba757600080fd5b612bb788606089013589016122b3565b92508060808801351115612bca57600080fd5b6080870135870188601f820112612be057600080fd5b612bed61228382356122d3565b81358082526020808301929160051b8401018b1015612c0b57600080fd5b602083015b6020843560051b850101811015612ca2578481351115612c2f57600080fd5b803584016040818e03601f19011215612c4757600080fd5b612c4f6121f3565b612c5c602083013561215a565b602082013581528660408301351115612c7457600080fd5b612c878e602060408501358501016122b3565b60208201528085525050602083019250602081019050612c10565b50809450505050509295509295909350565b604081526000612cc76040830185612449565b8281036020840152612cd98185612449565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035657610356612ce2565b600060018201612d1d57612d1d612ce2565b5060010190565b600060208284031215612d3657600080fd5b815167ffffffffffffffff811115612d4d57600080fd5b612800848285016129a0565b600082825180855260208086019550808260051b84010181860160005b84811015612da457601f19868403018952612d92838351612449565b98840198925090830190600101612d76565b5090979650505050505050565b60a081526000612dc460a0830188612449565b8281036020840152612dd68188612449565b90508281036040840152612dea8187612d59565b90506001600160e01b0319851660608401528281036080840152612e0e8185612449565b98975050505050505050565b8181038181111561035657610356612ce2565b60008085851115612e3d57600080fd5b83861115612e4a57600080fd5b5050820193919092039150565b8183823760009101908152919050565b600082601f830112612e7857600080fd5b81516020612e88612283836122d3565b82815260059290921b84018101918181019086841115612ea757600080fd5b8286015b8481101561238c57805167ffffffffffffffff811115612ecb5760008081fd5b612ed98986838b01016129a0565b845250918301918301612eab565b600060208284031215612ef957600080fd5b815167ffffffffffffffff80821115612f1157600080fd5b9083019060608286031215612f2557600080fd5b604051606081018181108382111715612f4057612f406121dd565b6040528251612f4e81612934565b8152602083015182811115612f6257600080fd5b612f6e87828601612e67565b602083015250604083015182811115612f8657600080fd5b612f92878286016129a0565b60408301525095945050505050565b6001600160a01b0381511682526000602082015160606020850152612fc96060850182612d59565b905060408301518482036040860152612cd98282612449565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561303757603f19888603018452613025858351612fa1565b94509285019290850190600101613009565b5092979650505050505050565b8515158152600060206001600160a01b03871681840152604060a08185015261307060a0850188612d59565b84810360608601526130828188612449565b905084810360808601528086518083528483019150848160051b84010185890160005b838110156130ee57858303601f19018552815180516001600160e01b03191684528801518884018890526130db88850182612449565b95890195935050908701906001016130a5565b50909d9c50505050505050505050505050565b6001600160a01b038616815260a06020820152600061312360a0830187612d59565b8281036040840152612dea8187612449565b60006020828403121561314757600080fd5b815161218d81612a6a565b6000815160208301516001600160e01b0319808216935060048310156131825780818460040360031b1b83161693505b505050919050565b600080600080600060a086880312156131a257600080fd5b85516131ad81612934565b602087015190955067ffffffffffffffff808211156131cb57600080fd5b6131d789838a01612e67565b955060408801519150808211156131ed57600080fd5b6131f989838a016129a0565b94506060880151915061320b8261215a565b60808801519193508082111561322057600080fd5b5061322d888289016129a0565b9150509295509295909350565b60208152600061218d6020830184612fa1565b6000835161325f818460208801612425565b835190830190613273818360208801612425565b01949350505050565b601f8211156132c657600081815260208120601f850160051c810160208610156132a35750805b601f850160051c820191505b818110156132c2578281556001016132af565b5050505b505050565b815167ffffffffffffffff8111156132e5576132e56121dd565b6132f9816132f38454612966565b8461327c565b602080601f83116001811461332e57600084156133165750858301515b600019600386901b1c1916600185901b1785556132c2565b600085815260208120601f198616915b8281101561335d5788860151825594840194600190910190840161333e565b508582101561337b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220fe9326ee5538b7f9616057320df0aa1d5bfe9c93fa8e618d955c777a8e60471164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638e5ea8df116100b2578063b241d0d311610081578063e0a8541211610066578063e0a85412146102ec578063ec11c823146102ff578063f2fde38b1461031257600080fd5b8063b241d0d3146102c6578063b4a85801146102d957600080fd5b80638e5ea8df146102485780639061b9231461025b578063a1cbcbaf1461026e578063a6b16419146102a657600080fd5b8063715018a6116101095780637b103999116100ee5780637b103999146101e55780638da5cb5b146102245780638e25a0f31461023557600080fd5b8063715018a6146101c857806376286c00146101d257600080fd5b806301ffc9a71461013b5780630667cfea14610163578063206c74c9146101845780636dc4fb73146101a5575b600080fd5b61014e610149366004612170565b610325565b60405190151581526020015b60405180910390f35b610176610171366004612397565b61035c565b60405161015a929190612475565b610197610192366004612520565b610391565b60405161015a929190612589565b6101b86101b33660046125fe565b61047e565b60405161015a949392919061266a565b6101d061054b565b005b6101976101e03660046126a6565b61055f565b61020c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015a565b6000546001600160a01b031661020c565b610176610243366004612705565b610587565b6101d06102563660046127cb565b61061c565b610176610269366004612808565b61063b565b61028161027c366004612867565b610734565b604080516001600160a01b03909416845260208401929092529082015260600161015a565b6102b96102b43660046128a9565b61075a565b60405161015a91906128c2565b6101b86102d43660046128d5565b610806565b6101976102e73660046125fe565b6108f7565b6101766102fa3660046125fe565b61093b565b6101b861030d366004612867565b61099f565b6101d0610320366004612949565b610a94565b60006001600160e01b03198216639061b92360e01b148061035657506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060006103848686868663e0a8541260e01b60405180602001604052806000815250610587565b9150915094509492505050565b606060006104728585856001805480602002602001604051908101604052809291908181526020016000905b828210156104695783829060005260206000200180546103dc90612966565b80601f016020809104026020016040519081016040528092919081815260200182805461040890612966565b80156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b5050505050815260200190600101906103bd565b5050505061055f565b91509150935093915050565b6060600080808080808061049c8c8c8c8c636dc4fb7360e01b610b29565b935093509350935060008151111561050e57600080828060200190518101906104c591906129e5565b915091506000866000815181106104de576104de612a37565b60200260200101518060200190518101906104f99190612a4d565b929a5091985096509294506105409350505050565b6105338460008151811061052457610524612a37565b60200260200101518484610eaf565b9750975097509750505050505b945094509450949050565b610553611010565b61055d600061106a565b565b606060006103848686868663b4a8580160e01b604051806020016040528060008152506110d2565b6040805160018082528183019092526060916000918291816020015b60608152602001906001900390816105a357905050905086816000815181106105ce576105ce612a37565b60200260200101819052506000806105ea8b8b858b8b8b6110d2565b915091508160008151811061060157610601612a37565b60200260200101518194509450505050965096945050505050565b610624611010565b805161063790600190602084019061209d565b5050565b606060006104728585856001805480602002602001604051908101604052809291908181526020016000905b8282101561071357838290600052602060002001805461068690612966565b80601f01602080910402602001604051908101604052809291908181526020018280546106b290612966565b80156106ff5780601f106106d4576101008083540402835291602001916106ff565b820191906000526020600020905b8154815290600101906020018083116106e257829003601f168201915b505050505081526020019060010190610667565b5050505063e0a8541260e01b60405180602001604052806000815250610587565b60008060008060008061074988886000611212565b919750955093505050509250925092565b6001818154811061076a57600080fd5b90600052602060002001600091509050805461078590612966565b80601f01602080910402602001604051908101604052809291908181526020018280546107b190612966565b80156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b505050505081565b6060600080600080610852600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114c09050565b60405160240161086491815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f691f3431000000000000000000000000000000000000000000000000000000001790528151908101909152600080825291925081906108d4908b908b9086908c90636dc4fb7360e01b90610587565b915091506108e382828a610eaf565b965096509650965050505093509350935093565b60606000808061092a888888887fb4a8580100000000000000000000000000000000000000000000000000000000610b29565b50919a909950975050505050505050565b60606000808061096e888888887fe0a8541200000000000000000000000000000000000000000000000000000000610b29565b5050915091508160008151811061098757610987612a37565b60200260200101518193509350505094509492505050565b60606000806000610a8286866001805480602002602001604051908101604052809291908181526020016000905b82821015610a795783829060005260206000200180546109ec90612966565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1890612966565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b5050505050815260200190600101906109cd565b50505050610806565b93509350935093505b92959194509250565b610a9c611010565b6001600160a01b038116610b1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610b268161106a565b50565b60606000606080610b8d60405180610100016040528060608152602001606081526020016060815260200160006001600160e01b031916815260200160001515815260200160006001600160a01b0316815260200160608152602001606081525090565b6001600160e01b031986166060820152600080610bac8b8d018d612a78565b90925090506060610bbf8a8c018c612b30565b60c089019190915260408801919091526001600160a01b0390911660a08701529015156080860152805183519192501015610bf957600080fd5b805167ffffffffffffffff811115610c1357610c136121dd565b604051908082528060200260200182016040528015610c4657816020015b6060815260200190600190039081610c315790505b506020850152805167ffffffffffffffff811115610c6657610c666121dd565b604051908082528060200260200182016040528015610c8f578160200160208202803683370190505b5060e08501526000805b8251811015610e7d578251600090849083908110610cb957610cb9612a37565b6020026020010151600001516001600160e01b03191603610d1857828181518110610ce657610ce6612a37565b60200260200101516020015186602001518281518110610d0857610d08612a37565b6020026020010181905250610e6b565b848281518110610d2a57610d2a612a37565b602002602001015115610da15760018660e001518281518110610d4f57610d4f612a37565b602002602001019015159081151581525050838281518110610d7357610d73612a37565b602002602001015186602001518281518110610d9157610d91612a37565b6020026020010181905250610e5d565b828181518110610db357610db3612a37565b602002602001015160000151848381518110610dd157610dd1612a37565b6020026020010151848381518110610deb57610deb612a37565b602002602001015160200151604051602401610e08929190612cb4565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505086602001518281518110610e5157610e51612a37565b60200260200101819052505b610e68826001612cf8565b91505b80610e7581612d0b565b915050610c99565b50610e878561157f565b8560a0015186604001518760c001519850985098509850505050505095509550955095915050565b606060008060008087806020019051810190610ecb9190612d24565b9050600080610ed9836119c9565b91509150600081604051602401610ef291815260200190565b60408051601f19818403018152918152602080830180516001600160e01b03167f3b3b57de000000000000000000000000000000000000000000000000000000001790529051919250600091610f4c9187918e9101612475565b6040516020818303038152906040529050600080306001600160a01b0316638e25a0f387868f636dc4fb7360e01b886040518663ffffffff1660e01b8152600401610f9b959493929190612db1565b600060405180830381865afa158015610fb8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fe091908101906129e5565b91509150600082806020019051810190610ffa9190612a4d565b979f979e50909b50959950505050505050505050565b6000546001600160a01b0316331461055d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b14565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008060006110e38a8a610734565b919450849350909150506001600160a01b03821661112d576040517f7199966d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516101206020601f8d01819004028201810190925261010081018b815283151592611202929182918f908f9081908501838280828437600092019190915250505090825250602081018c9052604081018b90526001600160e01b03198a16606082015283151560808201526001600160a01b03871660a082015260c081018990528b5160e09091019067ffffffffffffffff8111156111d1576111d16121dd565b6040519080825280602002602001820160405280156111fa578160200160208202803683370190505b50905261157f565b9450505050965096945050505050565b60008060008086868681811061122a5761122a612a37565b919091013560f81c915050600081900361124e5750600092508291508390506114b7565b600061125a8287612cf8565b611265906001612cf8565b905060008260421480156112ab57508888611281896001612cf8565b81811061129057611290612a37565b9050013560f81c60f81b6001600160f81b031916605b60f81b145b80156112e9575088886112bf600185612e1a565b8181106112ce576112ce612a37565b9050013560f81c60f81b6001600160f81b031916605d60f81b145b1561136157611359600060408b8b6113028c6002612cf8565b9061130e600189612e1a565b9261131b93929190612e2d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929493925050611bf29050565b509050611393565b888861136e896001612cf8565b61137a92859290612e2d565b604051611388929190612e57565b604051809103902090505b60008060006113a38c8c87611212565b925092509250600082856040516020016113c7929190918252602082015260400190565b60408051601f198184030181529082905280516020909101207f0178b8bf0000000000000000000000000000000000000000000000000000000082526004820181905291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612a4d565b90506001600160a01b038116156114a857995097508996506114b795505050505050565b50929850919650909450505050505b93509350939050565b60008060006114cf8585611cc3565b90925090508161154157600185516114e79190612e1a565b84146115355760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610b14565b50600091506103569050565b61154b85826114c0565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6020810151516060906000808267ffffffffffffffff8111156115a4576115a46121dd565b60405190808252806020026020018201604052801561160257816020015b6115ef604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816115c25790505b50905060008367ffffffffffffffff811115611620576116206121dd565b60405190808252806020026020018201604052801561166657816020015b60408051808201909152600081526060602082015281526020019060019003908161163e5790505b5090508367ffffffffffffffff811115611682576116826121dd565b6040519080825280602002602001820160405280156116b557816020015b60608152602001906001900390816116a05790505b5086515160a088015191965015906000906116cf90611d7a565b9050876080015180156116e0575080155b15611717576040517f82c2c72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868110156119075760008960200151828151811061173a5761173a612a37565b6020026020010151905060008a60e00151838151811061175c5761175c612a37565b60200260200101519050801561179157818a848151811061177f5761177f612a37565b602002602001018190525050506118f5565b8415801561179c5750835b156117e2578a516040516117b591908490602401612cb4565b60408051601f198184030181529190526020810180516001600160e01b0316639061b92360e01b17905291505b6000806000806117f68f60a0015187611df5565b9350935093509350831561186b57828060200190518101906118189190612ee7565b8b8d8151811061182a5761182a612a37565b6020026020010181905250818a888151811061184857611848612a37565b602090810291909101015261185e60018d612cf8565b9b505050505050506118f5565b8080156118755750875b15611891578280602001905181019061188e9190612d24565b92505b828e88815181106118a4576118a4612a37565b60200260200101819052508e6020015187815181106118c5576118c5612a37565b60200260200101518a88815181106118df576118df612a37565b6020026020010151602001819052505050505050505b806118ff81612d0b565b91505061171a565b508460000361191b57505050505050919050565b84845230886040015163a780bab660e01b8660405160240161193d9190612fe2565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050508a606001518b608001518c60a001518d604001518e60c001518a60405160200161199e959493929190613044565b60408051601f1981840301815290829052630556f18360e41b8252610b149594939291600401613101565b8051606090600090819084906119e0816002612cf8565b67ffffffffffffffff8111156119f8576119f86121dd565b6040519080825280601f01601f191660200182016040528015611a22576020820181803683370190505b50945060009350808403611a6757600060f81b85600081518110611a4857611a48612a37565b60200101906001600160f81b031916908160001a905350505050915091565b60001981015b828181518110611a7f57611a7f612a37565b01602001517fff00000000000000000000000000000000000000000000000000000000000000167f2e0000000000000000000000000000000000000000000000000000000000000003611b41578360f81b868260010181518110611ae557611ae5612a37565b60200101906001600160f81b031916908160001a90535084611b0e846001840160ff8816611f92565b60408051602081019390935282015260600160405160208183030381529060405280519060200120945060009350611b91565b600184019350828181518110611b5957611b59612a37565b602001015160f81c60f81b868260010181518110611b7957611b79612a37565b60200101906001600160f81b031916908160001a9053505b8015611ba05760001901611a6d565b5083611bb183600060ff8716611f92565b6040805160208101939093528201526060016040516020818303038152906040528051906020012093508260f81b85600081518110611a4857611a48612a37565b8251600090600190831115611c0657600080fd5b611c57565b6000603a8210602f83111615611c235750602f190190565b60478210604083111615611c3957506036190190565b60678210606083111615611c4f57506056190190565b5060ff919050565b60208501845b84811015611cb957611c748183015160001a611c0b565b611c866001830184015160001a611c0b565b60ff811460ff83141715611c9f57600094505050611cb9565b60049190911b1760089490941b9390931792600201611c5d565b5050935093915050565b60008083518310611d165760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e647300006044820152606401610b14565b6000848481518110611d2a57611d2a612a37565b016020015160f81c90508015611d5657611d4f85611d49866001612cf8565b83611f92565b9250611d5b565b600092505b611d658185612cf8565b611d70906001612cf8565b9150509250929050565b6040516301ffc9a760e01b8152639061b92360e01b60048201526000906001600160a01b038316906301ffc9a79061c350906024016020604051808303818786fa93505050508015611de9575060408051601f3d908101601f19168201909252611de691810190613135565b60015b61035657506000919050565b60408051808201909152600080825260606020830181905290916000611e1b8686611fb6565b90503d8115611e41576000611e31600083612048565b909550935060019150610a8b9050565b60048110611f88576000611e5760006004612048565b90506000611e6f6004611e6a8186612e1a565b612048565b9050630556f18360e41b611e8283613152565b6001600160e01b03191603611f5057600080600080600085806020019051810190611ead919061318a565b945094509450945094508d6001600160a01b0316856001600160a01b031603611f46576040518060600160405280866001600160a01b0316815260200185815260200184815250604051602001611f04919061323a565b60408051601f198184030181528282019091526001600160e01b03199093168152602081019190915260019b50909950975060009650610a8b95505050505050565b5050505050611f85565b8181604051602001611f6392919061324d565b60408051601f19818403018152919052600097509550869350610a8b92505050565b50505b5092959194509250565b8251600090611fa18385612cf8565b1115611fac57600080fd5b5091016020012090565b60006001600160a01b0383163b6120355760405162461bcd60e51b815260206004820152602e60248201527f4c6f774c6576656c43616c6c5574696c733a207374617469632063616c6c207460448201527f6f206e6f6e2d636f6e74726163740000000000000000000000000000000000006064820152608401610b14565b600080835160208501865afa9392505050565b60608167ffffffffffffffff811115612063576120636121dd565b6040519080825280601f01601f19166020018201604052801561208d576020820181803683370190505b5090508183602083013e92915050565b8280548282559060005260206000209081019282156120e3579160200282015b828111156120e357825182906120d390826132cb565b50916020019190600101906120bd565b506120ef9291506120f3565b5090565b808211156120ef5760006121078282612110565b506001016120f3565b50805461211c90612966565b6000825580601f1061212c575050565b601f016020900490600052602060002090810190610b2691905b808211156120ef5760008155600101612146565b6001600160e01b031981168114610b2657600080fd5b60006020828403121561218257600080fd5b813561218d8161215a565b9392505050565b60008083601f8401126121a657600080fd5b50813567ffffffffffffffff8111156121be57600080fd5b6020830191508360208285010111156121d657600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612216576122166121dd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612245576122456121dd565b604052919050565b600067ffffffffffffffff821115612267576122676121dd565b50601f01601f191660200190565b60006122886122838461224d565b61221c565b905082815283838301111561229c57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126122c457600080fd5b61218d83833560208501612275565b600067ffffffffffffffff8211156122ed576122ed6121dd565b5060051b60200190565b600082601f83011261230857600080fd5b81356020612318612283836122d3565b82815260059290921b8401810191818101908684111561233757600080fd5b8286015b8481101561238c57803567ffffffffffffffff81111561235b5760008081fd5b8701603f8101891361236d5760008081fd5b61237e898683013560408401612275565b84525091830191830161233b565b509695505050505050565b600080600080606085870312156123ad57600080fd5b843567ffffffffffffffff808211156123c557600080fd5b6123d188838901612194565b909650945060208701359150808211156123ea57600080fd5b6123f6888389016122b3565b9350604087013591508082111561240c57600080fd5b50612419878288016122f7565b91505092959194509250565b60005b83811015612440578181015183820152602001612428565b50506000910152565b60008151808452612461816020860160208601612425565b601f01601f19169290920160200192915050565b6040815260006124886040830185612449565b90506001600160a01b03831660208301529392505050565b600082601f8301126124b157600080fd5b813560206124c1612283836122d3565b82815260059290921b840181019181810190868411156124e057600080fd5b8286015b8481101561238c57803567ffffffffffffffff8111156125045760008081fd5b6125128986838b01016122b3565b8452509183019183016124e4565b60008060006040848603121561253557600080fd5b833567ffffffffffffffff8082111561254d57600080fd5b61255987838801612194565b9095509350602086013591508082111561257257600080fd5b5061257f868287016124a0565b9150509250925092565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b838110156125e057605f198887030185526125ce868351612449565b955093820193908201906001016125b2565b50508394506001600160a01b03871681870152505050509392505050565b6000806000806040858703121561261457600080fd5b843567ffffffffffffffff8082111561262c57600080fd5b61263888838901612194565b9096509450602087013591508082111561265157600080fd5b5061265e87828801612194565b95989497509550505050565b60808152600061267d6080830187612449565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b600080600080606085870312156126bc57600080fd5b843567ffffffffffffffff808211156126d457600080fd5b6126e088838901612194565b909650945060208701359150808211156126f957600080fd5b6123f6888389016124a0565b60008060008060008060a0878903121561271e57600080fd5b863567ffffffffffffffff8082111561273657600080fd5b6127428a838b01612194565b9098509650602089013591508082111561275b57600080fd5b6127678a838b016122b3565b9550604089013591508082111561277d57600080fd5b6127898a838b016122f7565b94506060890135915061279b8261215a565b909250608088013590808211156127b157600080fd5b506127be89828a016122b3565b9150509295509295509295565b6000602082840312156127dd57600080fd5b813567ffffffffffffffff8111156127f457600080fd5b612800848285016122f7565b949350505050565b60008060006040848603121561281d57600080fd5b833567ffffffffffffffff8082111561283557600080fd5b61284187838801612194565b9095509350602086013591508082111561285a57600080fd5b5061257f868287016122b3565b6000806020838503121561287a57600080fd5b823567ffffffffffffffff81111561289157600080fd5b61289d85828601612194565b90969095509350505050565b6000602082840312156128bb57600080fd5b5035919050565b60208152600061218d6020830184612449565b6000806000604084860312156128ea57600080fd5b833567ffffffffffffffff8082111561290257600080fd5b61290e87838801612194565b9095509350602086013591508082111561292757600080fd5b5061257f868287016122f7565b6001600160a01b0381168114610b2657600080fd5b60006020828403121561295b57600080fd5b813561218d81612934565b600181811c9082168061297a57607f821691505b60208210810361299a57634e487b7160e01b600052602260045260246000fd5b50919050565b600082601f8301126129b157600080fd5b81516129bf6122838261224d565b8181528460208386010111156129d457600080fd5b612800826020830160208701612425565b600080604083850312156129f857600080fd5b825167ffffffffffffffff811115612a0f57600080fd5b612a1b858286016129a0565b9250506020830151612a2c81612934565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612a5f57600080fd5b815161218d81612934565b8015158114610b2657600080fd5b60008060408385031215612a8b57600080fd5b823567ffffffffffffffff80821115612aa357600080fd5b818501915085601f830112612ab757600080fd5b81356020612ac7612283836122d3565b82815260059290921b84018101918181019089841115612ae657600080fd5b948201945b83861015612b0d578535612afe81612a6a565b82529482019490820190612aeb565b96505086013592505080821115612b2357600080fd5b50611d70858286016124a0565b600080600080600060a08688031215612b4857600080fd5b612b528635612a6a565b85359450612b636020870135612934565b6020860135935067ffffffffffffffff8060408801351115612b8457600080fd5b612b9488604089013589016122f7565b93508060608801351115612ba757600080fd5b612bb788606089013589016122b3565b92508060808801351115612bca57600080fd5b6080870135870188601f820112612be057600080fd5b612bed61228382356122d3565b81358082526020808301929160051b8401018b1015612c0b57600080fd5b602083015b6020843560051b850101811015612ca2578481351115612c2f57600080fd5b803584016040818e03601f19011215612c4757600080fd5b612c4f6121f3565b612c5c602083013561215a565b602082013581528660408301351115612c7457600080fd5b612c878e602060408501358501016122b3565b60208201528085525050602083019250602081019050612c10565b50809450505050509295509295909350565b604081526000612cc76040830185612449565b8281036020840152612cd98185612449565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035657610356612ce2565b600060018201612d1d57612d1d612ce2565b5060010190565b600060208284031215612d3657600080fd5b815167ffffffffffffffff811115612d4d57600080fd5b612800848285016129a0565b600082825180855260208086019550808260051b84010181860160005b84811015612da457601f19868403018952612d92838351612449565b98840198925090830190600101612d76565b5090979650505050505050565b60a081526000612dc460a0830188612449565b8281036020840152612dd68188612449565b90508281036040840152612dea8187612d59565b90506001600160e01b0319851660608401528281036080840152612e0e8185612449565b98975050505050505050565b8181038181111561035657610356612ce2565b60008085851115612e3d57600080fd5b83861115612e4a57600080fd5b5050820193919092039150565b8183823760009101908152919050565b600082601f830112612e7857600080fd5b81516020612e88612283836122d3565b82815260059290921b84018101918181019086841115612ea757600080fd5b8286015b8481101561238c57805167ffffffffffffffff811115612ecb5760008081fd5b612ed98986838b01016129a0565b845250918301918301612eab565b600060208284031215612ef957600080fd5b815167ffffffffffffffff80821115612f1157600080fd5b9083019060608286031215612f2557600080fd5b604051606081018181108382111715612f4057612f406121dd565b6040528251612f4e81612934565b8152602083015182811115612f6257600080fd5b612f6e87828601612e67565b602083015250604083015182811115612f8657600080fd5b612f92878286016129a0565b60408301525095945050505050565b6001600160a01b0381511682526000602082015160606020850152612fc96060850182612d59565b905060408301518482036040860152612cd98282612449565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561303757603f19888603018452613025858351612fa1565b94509285019290850190600101613009565b5092979650505050505050565b8515158152600060206001600160a01b03871681840152604060a08185015261307060a0850188612d59565b84810360608601526130828188612449565b905084810360808601528086518083528483019150848160051b84010185890160005b838110156130ee57858303601f19018552815180516001600160e01b03191684528801518884018890526130db88850182612449565b95890195935050908701906001016130a5565b50909d9c50505050505050505050505050565b6001600160a01b038616815260a06020820152600061312360a0830187612d59565b8281036040840152612dea8187612449565b60006020828403121561314757600080fd5b815161218d81612a6a565b6000815160208301516001600160e01b0319808216935060048310156131825780818460040360031b1b83161693505b505050919050565b600080600080600060a086880312156131a257600080fd5b85516131ad81612934565b602087015190955067ffffffffffffffff808211156131cb57600080fd5b6131d789838a01612e67565b955060408801519150808211156131ed57600080fd5b6131f989838a016129a0565b94506060880151915061320b8261215a565b60808801519193508082111561322057600080fd5b5061322d888289016129a0565b9150509295509295909350565b60208152600061218d6020830184612fa1565b6000835161325f818460208801612425565b835190830190613273818360208801612425565b01949350505050565b601f8211156132c657600081815260208120601f850160051c810160208610156132a35750805b601f850160051c820191505b818110156132c2578281556001016132af565b5050505b505050565b815167ffffffffffffffff8111156132e5576132e56121dd565b6132f9816132f38454612966565b8461327c565b602080601f83116001811461332e57600084156133165750858301515b600019600386901b1c1916600185901b1785556132c2565b600085815260208120601f198616915b8281101561335d5788860151825594840194600190910190840161333e565b508582101561337b5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220fe9326ee5538b7f9616057320df0aa1d5bfe9c93fa8e618d955c777a8e60471164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "findResolver(bytes)": {
        "details": "Finds a resolver by recursively querying the registry, starting at the longest name and progressively      removing labels until it finds a result.",
        "params": {
          "name": "The name to resolve, in DNS-encoded and normalised form."
        },
        "returns": {
          "_0": "resolver The Resolver responsible for this name.",
          "_1": "namehash The namehash of the full name.",
          "_2": "finalOffset The offset of the first label with a resolver."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolve(bytes,bytes)": {
        "details": "Performs ENS name resolution for the supplied name and resolution data.",
        "params": {
          "data": "The resolution data, as specified in ENSIP-10.",
          "name": "The name to resolve, in normalised and DNS-encoded form."
        },
        "returns": {
          "_0": "The result of resolving the name."
        }
      },
      "reverse(bytes,string[])": {
        "details": "Performs ENS name reverse resolution for the supplied reverse name.",
        "params": {
          "reverseName": "The reverse name to resolve, in normalised and DNS-encoded form. e.g. b6E040C9ECAaE172a89bD561c5F73e1C48d28cd9.addr.reverse"
        },
        "returns": {
          "_0": "The resolved name, the resolved address, the reverse resolver address, and the resolver address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Universal Resolver is a contract that handles the work of resolving a name entirely onchain, making it possible to make a single smart contract call to resolve an ENS name.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 444,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18518,
        "contract": "contracts/utils/UniversalResolver.sol:UniversalResolver",
        "label": "batchGatewayURLs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}